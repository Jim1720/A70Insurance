@page "/history"

@inject HttpClient Http 
@inject NavigationManager navigationManager 
@using A70Insurance.Models 
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage 
@inject NavigationManager navigationManager 
@using A70Insurance.ClaimHelpers; 
@inject IJSRuntime JSRuntime;


<style>

    th {
        font-size: medium;
        color: springgreen;
    }

    td {
        font-size: medium;
        color: white;
    }

    h2 {
        color: dodgerblue;
    }
</style>

<div class="container">


    <input style="visibility:hidden" type="text" id="hiddenAmount" name="hiddenAmount" value="unused" />



    <input style="visibility:hidden" type="text" id="hiddenClaimId" name="hiddenClaimId" value="unused" />



    <h2>Claim History</h2> 
  

        <p style="color:aquamarine"><em>@topMessage</em></p>
     

        <table class="table">

            <tbody>


                @{
                    // show list of claims
                    var count = 0;
                    var loop = 0;
                    var anyOfAbove = false;


                    var stay = "";

                    if (@found == true)
                    {  /* render if data present */

                        foreach (var c in @claimList)
                        {
                            count++;
                            loop++;
                            var type = "undefined";
                            var statColor = "white";
                            var plan = c.PlanId.ToString().Trim();
                            switch (c.ClaimType)
                            {
                                case "m":
                                    type = "Medical";
                                    statColor = "lightpink";
                                    break; ;
                                case "d":
                                    type = "Dental";
                                    break;
                                case "v":
                                    type = "Vision";
                                    break;
                                case "x":
                                    type = "Drug";
                                    break;
                                default:
                                    type = "Unknown";
                                    break;

                            }

                            <tr style="color:dodgerblue">
                                <td style="color:goldenrod">
                                    Claim  Identification:
                                </td>
                                <td style="color:goldenrod">
                                    Status:
                                </td>
                                <td style="color:goldenrod">
                                    Type:
                                </td>
                                <td style="color:goldenrod">
                                    Customer Plan:
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @c.ClaimIdNumber
                                </td>
                                <td style="@statColor">
                                    @c.ClaimStatus
                                </td>
                                <td>
                                    @type
                                </td>
                                <td>
                                    @plan
                                </td>
                            </tr>
                            <tr>
                                <td style="color:lawngreen">Patient</td>
                                <td style="color:lawngreen">Service Date</td>
                                <td style="color:lawngreen">Doctor</td>
                                <td style="color:lawngreen">Clinic</td> 
                                <td style="color:lawngreen">Location</td>
                            </tr>

                            var name = c.PatientFirst + " " + c.PatientLast;

                            var dos = c.DateService.ToString();
                            dos = dos.Substring(0, dos.IndexOf(" "));

                            var defaultDate = "1/1/1753";
                            stay = "";

                            var confine = c.DateConfine.ToString();
                            confine = confine.Substring(0, confine.IndexOf(" "));
                            // date not entered check
                            confine = (confine == defaultDate) ? "n/a" : confine;

                            var release = c.DateRelease.ToString();
                            release = release.Substring(0, release.IndexOf(" "));
                            // date not entered check
                            release = (release == defaultDate) ? "n/a" : release;


                            // show line if one or both dates present.
                            // always show line for consistency
                            var showHeader = true;
                            //var showHeader = confine != defaultDate || release != defaultDate;
                            var na = "n/a";

                            // show stay if both present - calculate stay
                            var empty = "";
                            if (confine != na && release != na &&
                                confine != empty && release != empty &&
                                c.DateRelease >= c.DateConfine)
                            {
                                showHeader = true;
                                DateTime confine1 = (DateTime)c.DateConfine;
                                DateTime release1 = (DateTime)c.DateRelease;

                                TimeSpan numberOfDays = release1 - confine1;
                                var strDays = numberOfDays.ToString("%d");
                                // bump up by 1 for partial days...
                                strDays = (Int32.Parse(strDays) + 1).ToString();
                                var lit = (strDays == "1") ? "day" : "days";
                                stay = strDays + " " + lit;
                            }


                            c.Procedure2 = c.Procedure2.Trim();

                            var procedures = "none";
                            // var status = "unknown";  // was removed see orig code
                            if (c.Procedure1 != "none") { procedures = c.Procedure1; }
                            if (c.Procedure2 != "none") { procedures = procedures + " " + c.Procedure2; }
                            // not used if (c.Procedure3 != "" && c.Procedure3 != "none") { procedures = procedures + " " + c.Procedure3; }

                            var service = c.Service;

                            var claimAdded = c.DateAdded;
                            <tr>

                                <td style="color:yellow">
                                    @name
                                </td>
                                <td style="color:white">
                                    @dos
                                </td>
                                 <td>@c.Physician</td> 
                                <td>@c.Clinic</td>
                                <td>@c.Location</td> 
                            </tr>

                            var diag = "";
                            c.Diagnosis2 = c.Diagnosis2.Trim();
                            if (c.Diagnosis1 != "none") { diag = c.Diagnosis1; }
                            if (c.Diagnosis2 != "none") { diag += c.Diagnosis2; }
                            <tr>
                                <td style="color:darkorange">Procedure:</td>
                                <td style="color:darkorange">Diagnosis:</td>
                                <td style="color:gold">Service:</td>
                                <td style="color:darkorange">Note:</td>
                                <td style="color:darkkhaki">Referral:</td>
                            </tr>
                            @if (c.ClaimDescription.Trim() == "")
                            {
                                c.ClaimDescription = "none";
                            }
                            <tr>
                                <td>@procedures</td>
                                <td>@diag</td>
                                <td>@service</td>
                                <td>@c.ClaimDescription</td>
                                <td>@c.Referral</td>
                            </tr>
                            <tr>
                                <td style="color:aqua">Submitted Charge:</td>
                                <td style="color:aqua">Plan Covered:</td>
                                <td style="color:aqua">Balance Owed:</td>
                                <td style="color:aqua">Payment Method:</td>
                            </tr>
                            <tr>
                                <td>$@c.TotalCharge</td>
                                <td>$@c.CoveredAmount</td>
                                <td>$@c.BalanceOwed</td>
                                <td>@c.PaymentAction</td>
                            </tr>

                            if (c.ClaimType == "m" && showHeader == true)
                            {
                                <tr>
                                    <td style="color:lightpink">Confinement Began:</td>
                                    <td style="color:lightblue">Released:</td>
                                    <td style="color:greenyellow">Length Stay:</td>
                                </tr>
                                <tr>
                                    <td>@confine</td>
                                    <td>@release</td>
                                    <td>@stay</td>
                                </tr>
                            }

                            if (c.ClaimType == "d")
                            {
                                <tr>
                                    <td>Tooth Number:</td>
                                </tr>
                                <tr>
                                    <td>@c.ToothNumber</td>
                                </tr>
                            }

                            if (c.ClaimType == "v")
                            {
                                <tr>
                                    <td>Eye Equipment:</td>
                                </tr>
                                <tr>
                                    <td>@c.Eyeware</td>
                                </tr>
                            }

                            if (c.ClaimType == "x")
                            {
                                <tr>
                                    <td>Prescription Drug:</td>
                                </tr>
                                <tr>
                                    <td>@c.DrugName</td>
                                </tr>
                            }

                            <!-- if claim paid show paid date and amount -->

                            var claimPaid = (c.ClaimStatus.Trim() == "Paid");
                            if (claimPaid)
                            {
                                var value = c.PaymentDate.ToString();
                                var paymentDate = value.Substring(0, value.IndexOf(" "));
                                <tr>
                                    <td style="color:lawngreen">Payment Amount</td>
                                    <td style="color:lawngreen">Date</td>
                                    <td style="color:lawngreen">Payment Plan</td>
                                </tr>
                                <tr>
                                    <td>$@c.PaymentAmount</td>
                                    <td>@paymentDate</td>
                                    <td>@c.PaymentPlan</td>
                                </tr>

                            }

                            <!-- if adjustment/adjusted add this line-->

                            var adjustment = (c.ClaimStatus.Trim() == "Adjustment");
                            if (adjustment)
                            {
                                var action = "Adjustment";
                                var date = "on";
                                var what = "of claim";

                                var value = c.DateAdded.ToString();
                                var dateAdded = value.Substring(0, value.IndexOf(" "));
                                <tr>
                                    <td style="color:goldenrod">@action</td>
                                    <td style="color:goldenrod">@date</td>
                                    <td style="color:goldenrod">@what</td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td>@dateAdded</td>
                                    <td>@c.AdjustedClaimId</td>
                                </tr>
                            }
                            var adjusted = (c.ClaimStatus.Trim() == "Adjusted");
                            if (adjusted)
                            {

                                var value = c.AdjustedDate.ToString();
                                var adjustedDate = value.Substring(0, value.IndexOf(" "));

                                var action = "Claim Adjusted";
                                var date = "on";
                                var what = "with adjustment";
                                <tr>
                                    <td style="color:goldenrod">@action</td>
                                    <td style="color:goldenrod">@date</td>
                                    <td style="color:goldenrod">@what</td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td>@adjustedDate</td>
                                    <td>@c.AdjustingClaimId</td>
                                </tr>
                            }

                            <!-- build action line -->
                            c.ClaimStatus = c.ClaimStatus.Trim();
                            // Paid or Adjustment are similar.
                            // allow entered claims to be adjusted even if not paid.
                            var allowPay = (c.ClaimStatus == "Entered" || c.ClaimStatus == "Adjustment");
                            var allowAdjustment = (c.ClaimStatus == "Entered" || c.ClaimStatus == "Adjustment");

                            anyOfAbove = allowAdjustment || allowPay;
                            var adjust = "adjust" + c.ClaimIdNumber;
                            var pay = "pay..." + c.ClaimIdNumber;

                            // index into the claim array
                            // controller will fish out the id AdjustButton
                            // and read the AdjustValue to
                            // select the claim to be adjusted.
                            // The claim data will be passed to the claim
                            // method of the controller to start the adjustment
                            // process.

                            if (anyOfAbove)
                            {
                                var q = "'";
                                var cId = @q + c.ClaimIdNumber.Trim() + q;

                                <tr>
                                    @if (allowPay)
                                    {
                                        <td>
                                            <button value=@pay
                                                    name="sub"
                                                    type="button"
                                                    class="btn btn-outline-warning"
                                                    @onclick="e => OnPayCLaim(e, cId)">
                                                Pay Claim
                                            </button>
                                        </td>
                                    }
                                    @if (allowAdjustment)
                                    {
                                        <td>
                                            <button value=@adjust
                                                    name="sub"
                                                    type="submit"
                                                    @onclick="e => OnAdjustClaim(e, cId)"
                                                    class="btn btn-outline-warning">
                                                Adjust
                                            </button>
                                        </td>
                                    } 

                                <td>

                                    <button style="color:goldenrod" class="btn btn-outline-primary"
                                            @onclick="menu">
                                        Menu
                                    </button>


                                </td>
                                </tr>
                            }
                            else
                            {
                                      <tr><td>

                                               <button style="color:goldenrod" class="btn btn-outline-primary"
                                                      @onclick="menu">
                                                        Menu
                                                </button>

                                     </td></tr>


                            }



                        }

                    }

                }

            </tbody>
        </table>
        


</div>

@code{

    Boolean found = false;

    string topMessage = "Reading claim history.";

    [Parameter]

    public string CustomerId { get; set; }

    private List<Claim> claimList;

    protected override async Task OnInitializedAsync()
    {
        var id = sessionStorage.GetItem<string>("custId");
        if (id == null)
        {
            navigationManager.NavigateTo("/"); // backdoor logic 
        }

        var _send = Env.url;

        string custId = "";

        try
        {
            custId = sessionStorage.GetItem<string>("custId").Trim();
        }
        catch(SystemException ex)
        {
            // code comes here when not signed in.
            var m = ex.Message.ToString(); // avoid compile warning.

            // needed in any component that calls back to navigation using cascading paramerter
            // due to rendering exception when signin not used by custoner.

            // needed here to when rendering exception also.

            navigationManager.NavigateTo("/"); // backdoor logic 
        }


        var sendString = _send + "/History/" + custId;

        try
        {
            claimList = await Http.GetFromJsonAsync<List<Claim>>(sendString);
            if (claimList != null && claimList.Count > 0)
            {
                found = true;
            }

        }
        catch (System.Net.Http.HttpRequestException re)
        {
            // we get here when no claims from -getfromjsonasync exceptions on this
            // to handle this just display a message

            var m = re.ToString();

            topMessage = "No Claims found for this customer.";

            StateHasChanged();
            return;

        }
        catch (SystemException ex)
        {
            // code comes here when not signed in.
            var m = ex.Message.ToString(); // avoid compile warning.

            // needed in any component that calls back to navigation using cascading paramerter
            // due to rendering exception when signin not used by custoner.

            // needed here to when rendering exception also.

            navigationManager.NavigateTo("/"); // backdoor logic 

        }
        catch (JSException j)
        {
            var m = j.Message.ToString();
        }

        if(found == false)
        {
            topMessage = "No claims available for this customer.";
        }

        StateHasChanged();
    }


    private void OnAdjustClaim(MouseEventArgs e, string AdjClaimId)
    {

        // todo see plan for var pass.
        sessionStorage.SetItem<string>("historyAdjustedId", AdjClaimId);
        // goto claim screen.
        navigationManager.NavigateTo("/claim");
    }



    private async void OnPayCLaim(MouseEventArgs e, string PayClaimId)
    {

        var amount = await PromptForAmount();

        if(amount == "cancelled")
        {
            return; // user  canclled payment.
        }

        PayClaimHelper payClaimHelper = new PayClaimHelper(Http, Env.url);

        await payClaimHelper.PayClaim(PayClaimId, amount);

        // set message for menu
        var msg = "Claim paid successfully";
        sessionStorage.SetItem<string>("MenuMessage", msg);

        // goto main menu
        navigationManager.NavigateTo("/menu");
    }

    private async  Task<string> PromptForAmount()
    {

        // cancel returns null

        // https://docs.microsoft.com/en-us/aspnet/core/blazor/call-javascript-from-dotnet?view=aspnetcore-3.1

        var stop = false;
        decimal validDecimal = 0;

        var promptMessage = "Enter Claim Payment Amount.";
        var promptDefault = "0.0";


        /*  if amount not valid decimal retry. Cancel returns null and stops logic */

        while (stop == false)
        {

            var amount = await JSRuntime.InvokeAsync<string>( "prompt", promptMessage, promptDefault);

            if (amount == null)
            {
                return "cancelled";
            }

            // Edit user input for proper numeric

            var goodAmount = decimal.TryParse(amount, out validDecimal);

            if (goodAmount)
            {
                stop = true;
            }

        }

        return validDecimal.ToString();
    }

    private void menu()
    {

        // goto main menu
        navigationManager.NavigateTo("/menu");

    }


    public partial class Claim
    {
        public int Id { get; set; }
        public string ClaimIdNumber { get; set; }
        public string ClaimDescription { get; set; }
        public string CustomerId { get; set; }
        public string PlanId { get; set; }
        public string PatientFirst { get; set; }
        public string PatientLast { get; set; }
        public string Diagnosis1 { get; set; }
        public string Diagnosis2 { get; set; }
        public string Procedure1 { get; set; }
        public string Procedure2 { get; set; }
        public string Procedure3 { get; set; }
        public string Physician { get; set; }
        public string Clinic { get; set; }
        public DateTime? DateService { get; set; }
        public string Service { get; set; }
        public string ServiceItem { get; set; }
        public string PaymentPlan { get; set; }
        public string Location { get; set; }
        public decimal TotalCharge { get; set; }
        public decimal CoveredAmount { get; set; }
        public decimal BalanceOwed { get; set; }
        public decimal PaymentAmount { get; set; }
        public DateTime? PaymentDate { get; set; }
        public DateTime? DateAdded { get; set; }
        public string AdjustedClaimId { get; set; }
        public string AdjustingClaimId { get; set; }
        public DateTime? AdjustedDate { get; set; }
        public string AppAdjusting { get; set; }
        public string ClaimStatus { get; set; }
        public string Referral { get; set; }
        public string PaymentAction { get; set; }
        public string ClaimType { get; set; }
        public DateTime? DateConfine { get; set; }
        public DateTime? DateRelease { get; set; }
        public int ToothNumber { get; set; }
        public string DrugName { get; set; }
        public string Eyeware { get; set; }

        // edited fields - not updated

        public string ScreenDateService { get; set; }
        public string ScreenDateConfine { get; set; }
        public string ScreenDateRelease { get; set; }

        // show 1 of 4 dropdowns depending on claim type selected.

        /*

        [NotMapped]
        public List<SelectListItem> MedicalServiceOptions { get; set; }

        [NotMapped]
        public List<SelectListItem> DentalServiceOptions { get; set; }

        [NotMapped]
        public List<SelectListItem> VisionServiceOptons { get; set; }

        [NotMapped]
        public List<SelectListItem> DrugServiceOptions { get; set; }

        [NotMapped]
        public string firstMedical { get; set; }

        [NotMapped]
        public string firstDental { get; set; }

        [NotMapped]
        public string firstVision { get; set; }

        [NotMapped]
        public string firstDrug { get; set; }

        [NotMapped]
        public string pickedMedical { get; set; }

        [NotMapped]
        public string pickedDental { get; set; }

        [NotMapped]
        public string pickedVision { get; set; }

        [NotMapped]
        public string pickedDrug { get; set; }


            */

    }
}




